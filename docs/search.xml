<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[es6 基本语法]]></title>
      <url>https://q1192487554.github.io/2021/01/19/es6-Basic/</url>
      <content type="html"><![CDATA[<p>本篇文章将简单介绍 es6 基础语法</p>
<p id="div-border-left-green">记录一些比较常用的js语法主要是自己平时复制啊粘贴啊使用。</p>


<h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">"张三"</span>;                          <span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> name = <span class="string">"张三"</span>;                  <span class="comment">//导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> parent <span class="keyword">from</span> <span class="string">'./module'</span>                  <span class="comment">//全部引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; obj1, obj2 &#125; <span class="keyword">as</span> parent <span class="keyword">from</span> <span class="string">'./module'</span>     <span class="comment">//选择性引入</span></span><br><span class="line"><span class="keyword">import</span> obj1 <span class="keyword">as</span> parent  <span class="keyword">from</span> <span class="string">'./module'</span>              <span class="comment">//单个引入</span></span><br></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]                     </span><br><span class="line"><span class="keyword">var</span> attr=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)            </span><br><span class="line"></span><br><span class="line">&lt;!--实例方法--&gt;</span><br><span class="line">attr.reverse()                          <span class="comment">//数组反转</span></span><br><span class="line">attr.includes(<span class="number">2</span>)                        <span class="comment">//查询2在不在数组中</span></span><br><span class="line">attr.indexOf(<span class="number">2</span>)                         <span class="comment">//查询所在数组中的下标</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach</span><br><span class="line"><span class="built_in">Array</span>.prototype.map</span><br><span class="line"><span class="built_in">Array</span>.prototype.filter</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce</span><br><span class="line"><span class="built_in">Array</span>.prototype.some</span><br><span class="line"><span class="built_in">Array</span>.prototype.every</span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf</span><br><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf</span><br></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="keyword">let</span> item = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数几种调用形式"><a href="#函数几种调用形式" class="headerlink" title="函数几种调用形式"></a>函数几种调用形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func.call(<span class="keyword">this</span>, <span class="number">10</span>, <span class="number">20</span>);                   <span class="comment">//参数明确时可使用call,</span></span><br><span class="line">func.apply(<span class="keyword">this</span>, [<span class="number">10</span>, <span class="number">20</span>])                 <span class="comment">//参数不明确时使用apply传递参数数组</span></span><br><span class="line">func.bind(<span class="keyword">this</span>, [<span class="number">10</span>, <span class="number">20</span>])()                <span class="comment">//参数和call一样 他返回一个函数</span></span><br></pre></td></tr></table></figure>
<h2 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rs1 = <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">    <span class="keyword">var</span> rs2 = <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br><span class="line">hw.next()                                   <span class="comment">//* 第一次调用相当于执行helloWorldGenerator()</span></span><br><span class="line">hw.next(<span class="string">'rs1 的参数哦'</span>)                      <span class="comment">//* 第二次调用，Generator 函数从上次yield表达式停下的地方</span></span><br><span class="line">hw.next()                                   <span class="comment">//* &#123; value: 'ending', done: true &#125;</span></span><br><span class="line"></span><br><span class="line">&lt;!--迭代器方法--&gt;</span><br><span class="line">hw.next()                                    <span class="comment">//next()是将yield表达式替换成一个值。</span></span><br><span class="line">hw.throw()                                   <span class="comment">//throw()是将yield表达式替换成一个throw语句。</span></span><br><span class="line">hw.return()                                  <span class="comment">//return()是将yield表达式替换成一个return语句。</span></span><br></pre></td></tr></table></figure>
<h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="literal">true</span> ? resolve(value) : reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;       <span class="comment">//监控成功状态</span></span><br><span class="line">          </span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;     <span class="comment">//监控失败状态</span></span><br><span class="line">          </span><br><span class="line">    &#125;)</span><br><span class="line">    .finally(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;   <span class="comment">//不管状态 都会执行这个</span></span><br><span class="line">          </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">var</span> [v1,v2,v3] = <span class="built_in">Promise</span>.all([p1, p2, p3]);     <span class="comment">//传入多个Promise对象</span></span><br><span class="line"> <span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);             <span class="comment">//那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</span></span><br><span class="line"> <span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve();                      <span class="comment">//返回一个 resolve 状态的 Promise		</span></span><br><span class="line"> <span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);                <span class="comment">//返回一个 reject 状态的 Promise</span></span><br><span class="line"> </span><br><span class="line"> &lt;!--统一管理错误--&gt;</span><br><span class="line"> <span class="built_in">Promise</span>.try(<span class="function"><span class="params">()</span> =&gt;</span> database.users.get(&#123;<span class="attr">id</span>: userId&#125;))    </span><br><span class="line">  .then(...)</span><br><span class="line">  .catch(...)</span><br></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty()                 <span class="comment">//增加,修改属性  也可以添加get，set操作符</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf()                 <span class="comment">//设置原型链对象</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf()                 <span class="comment">//获取原型链对象</span></span><br></pre></td></tr></table></figure>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;               <span class="comment">//继承</span></span><br><span class="line">    _name;</span><br><span class="line">    _age;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);                    <span class="comment">//调用父类的constructor(x, y)</span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">static</span> classMethod() &#123;              <span class="comment">//静态方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> name() &#123;&#125;                       <span class="comment">//get方法</span></span><br><span class="line">    <span class="keyword">set</span> name(value) &#123;&#125;                  <span class="comment">//set方法</span></span><br><span class="line">&#125;</span><br><span class="line">object <span class="keyword">instanceof</span> <span class="built_in">Object</span>                <span class="comment">//来检测 constructor.prototype 是否存在于参数 object 的原型链上。</span></span><br></pre></td></tr></table></figure>
<h2 id="对象冒充继承-以及结合-protytype继承"><a href="#对象冒充继承-以及结合-protytype继承" class="headerlink" title="对象冒充继承  以及结合 protytype继承"></a>对象冒充继承  以及结合 protytype继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">fn1.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    fn1.call(<span class="keyword">this</span>, name)        <span class="comment">//对象冒充继承</span></span><br><span class="line">&#125;</span><br><span class="line">fn2.prototype = fn1.prototype   <span class="comment">//原型链继承</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> fn2(<span class="string">'小红'</span>)</span><br><span class="line">f2.work()</span><br><span class="line">f2.constructor                  <span class="comment">//查看构造方法</span></span><br></pre></td></tr></table></figure>
<h2 id="Object-assign-用法"><a href="#Object-assign-用法" class="headerlink" title="Object.assign()用法"></a>Object.assign()用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*  为对象添加属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123; x, y &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*  为对象添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeClass</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">    someMethod(arg1, arg2) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    anotherMethod() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span>= new Set()</span><br><span class="line"><span class="keyword">set</span>.add(value)                              //给集合内添加某个元素</span><br><span class="line"><span class="keyword">set</span>.remove(value)                           //移除集合中某个元素</span><br><span class="line"><span class="keyword">set</span>.clear(value)                            //清空集合</span><br><span class="line"><span class="keyword">set</span>.has(value)                              //检测集合内是否有某个元素</span><br><span class="line"><span class="keyword">set</span>.size()                                  //返回集合长度</span><br><span class="line"><span class="keyword">set</span>.values()                                //返回键值的遍历器</span><br><span class="line"><span class="keyword">set</span>.keys()                                  //返回键名的遍历器</span><br><span class="line"><span class="keyword">set</span>.entries()                               //返回键值对的遍历器</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">constructor</span>                             //构造函数，默认就是Set函数。</span><br></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>)                           <span class="comment">//添加新的key-value</span></span><br><span class="line">m.has(<span class="string">'Adam'</span>)                               <span class="comment">//是否存在key 'Adam': true</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>)                               <span class="comment">//输出</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>)                            <span class="comment">//删除</span></span><br><span class="line">m.keys()                                    <span class="comment">//返回所有key</span></span><br><span class="line">m.values()                                  <span class="comment">//返回所有value</span></span><br><span class="line"></span><br><span class="line">m.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>)            <span class="comment">//遍历map</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m)                            <span class="comment">//其实map就是一个二维数组而已</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) 			   </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [, value] <span class="keyword">of</span> map)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> es6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UE4 Config配置文件的使用]]></title>
      <url>https://q1192487554.github.io/2020/11/17/UE4-Config/</url>
      <content type="html"><![CDATA[<p>本篇文章将简单介绍UE4 项目开发过程中, 如何使用配置文件来修改项目中的参数</p>
<p id="div-border-left-green">我们知道在UE4项目的根目录下都会有一个 Config 的文件夹,里面有各种.ini 结尾的文件,这里面都是UE4 默认生成的一些配置文件. 今天我们要做的就是使用自己定义的.ini 文件,定义自己的 Config 变量, 并用这些变量来初始化 Class 中的定义的成员变量.</p>


<h4 id="1-关于打包后Config文件的位置"><a href="#1-关于打包后Config文件的位置" class="headerlink" title="1.关于打包后Config文件的位置"></a>1.关于打包后Config文件的位置</h4><p>如果采用Development 或者DebugGame 模式打包的话, Config 文件会生成在 <code>打包目录\项目名称\Saved\Config\WindowsNoEditor</code> 目录中, 但是如果用Shipping 模式打包的话, 会发现找不到这个目录了, 那么在Windows 系统下 我们可以在如下地址找到 <code>C:\Users\用户名\AppData\Local\项目名称\Saved\Config\WindowsNoEditor</code>.<br>接下来也会把我们自己的 Config 文件生成在指定的目录下,方便找到和修改.</p>
<h4 id="2-把成员变量设置为可用Config-配置"><a href="#2-把成员变量设置为可用Config-配置" class="headerlink" title="2. 把成员变量设置为可用Config 配置"></a>2. 把成员变量设置为可用Config 配置</h4><p>在UE4 c++ Class 变量的宏定义中, 加入 <code>config</code> 关键字<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否作为服务器启动</span></span><br><span class="line">UPROPERTY(config ,Category=<span class="string">"CustomIni"</span>)</span><br><span class="line"><span class="keyword">bool</span> bServer=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="3-定义-Config-目录"><a href="#3-定义-Config-目录" class="headerlink" title="3. 定义 Config 目录"></a>3. 定义 Config 目录</h4><p>在类的构造函数中可以定义 自己的 Config 目录, 这里定义为项目目录下的 Settings 文件夹, 配置文件的名称是 Custom.ini<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigPath = FPaths::ProjectDir() / TEXT(<span class="string">"Settings/Custom.ini"</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="4-加载和保存-Config-配置"><a href="#4-加载和保存-Config-配置" class="headerlink" title="4. 加载和保存 Config 配置"></a>4. 加载和保存 Config 配置</h4><p>定义两个函数:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UMyGameInstance::LoadCustomConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GConfig-&gt;Flush(<span class="literal">true</span>, ConfigPath);</span><br><span class="line">	ReloadConfig(<span class="keyword">this</span>-&gt;GetClass(), *ConfigPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UMyGameInstance::SaveCustomConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SaveConfig(CPF_Config, *ConfigPath);</span><br><span class="line">	GConfig-&gt;Flush(<span class="literal">false</span>, ConfigPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先在 void UMyGameInstance::Init() 中调用SaveCustomConfig();  (Actor 类可以在 BeginPlay  中 ) </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UMyGameInstance::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Super::Init();</span><br><span class="line"></span><br><span class="line">	bServer = <span class="literal">true</span>; <span class="comment">// bServer 默认为false, 而SaveCustomConfig() 函数只会把和默认值不一致的变量存入 Custom.ini中,所以此处先修改一下</span></span><br><span class="line">	SaveCustomConfig();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里调用 SaveCustomConfig()  的目的是为了在 <code>项目目录/Settings</code> 下生成 一个 Custom.ini.<br>Custom.ini 里面的 内容如下 <code>我为了测试方便是在蓝图中调用的</code> :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[/Game/Blueprints/GameControl/BP_PTGameInstance.BP_PTGameInstance_C]</span><br><span class="line">bServer=true</span><br></pre></td></tr></table></figure></p>
<p>然后把保存的函数注释掉, 只保留加载函数:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UMyGameInstance::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Super::Init();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bServer = true;</span></span><br><span class="line">	<span class="comment">// SaveCustomConfig();</span></span><br><span class="line"></span><br><span class="line">	LoadCustomConfig();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里调用 LoadCustomConfig() 的目的是为了把 UMyGameInstance 中 bServer 这个变量的值设置为 Custom.ini 中的值. 名称是一一对应的.</p>
<p>这个就实现了, 无论是Development, Debug模式,还是Shipping 模式打包的项目, 都可以在 <code>项目目录/Settings</code>  下面设置 Custom.ini 中的变量, 设置的变量的值就会被设置为对应的变量的值.<br>对于同一个项目,需要不同自定义配置来启动的话,这将是一个很方面的方式.</p>
]]></content>
      
        <categories>
            
            <category> UE4 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UE4 </tag>
            
            <tag> Config </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
